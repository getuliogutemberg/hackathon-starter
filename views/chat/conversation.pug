extends ../layout

block content
  .page-header.d-flex.align-items-center.justify-content-between
    .d-flex.align-items-center
      - otherUser.profile = otherUser.profile || {}
      if otherUser.profile.picture
        img.me-3(src=otherUser.profile.picture, style='height: 50px; width: 50px; border-radius: 50%;')
      else
        img.me-3(src=otherUser.gravatarUrl, style='height: 50px; width: 50px; border-radius: 50%;')
      div
        h3.mb-0 #{otherUser.profile.name || otherUser.email}
        if otherUser.online
          small.text-success
            i.fas.fa-circle.me-1
            | Online
        else
          small.text-muted Offline
        small#typingIndicator.text-muted.d-none
          i.fas.fa-pencil-alt.me-1
          | Digitando...
    a.btn.btn-outline-primary(href='/chat')
      i.fas.fa-arrow-left.me-2
      | Voltar

  .card.chat-container
    .card-body.chat-messages#messageContainer
      each message in messages
        .message(class=message.sender.toString() === user._id.toString() ? 'message-sent' : 'message-received')
          .message-content
            p.mb-0 #{message.content}
            small.text-muted #{new Date(message.createdAt).toLocaleTimeString()}

    .card-footer.bg-light
      form#messageForm
        input(type='hidden', name='_csrf', value=_csrf)
        .input-group
          input.form-control#messageInput(
            type='text', 
            placeholder='Digite sua mensagem...', 
            autocomplete='off'
          )
          button.btn.btn-primary(type='submit')
            i.fas.fa-paper-plane

block append head
  style.
    .chat-container {
      height: calc(100vh - 200px);
      display: flex;
      flex-direction: column;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
    }
    .message {
      margin-bottom: 1rem;
      max-width: 70%;
    }
    .message-sent {
      margin-left: auto;
    }
    .message-received {
      margin-right: auto;
    }
    .message-content {
      padding: 0.5rem 1rem;
      border-radius: 1rem;
    }
    .message-sent .message-content {
      background-color: #007bff;
      color: white;
    }
    .message-received .message-content {
      background-color: #f8f9fa;
    }
    .message-sent .message-content small {
      color: rgba(255,255,255,0.7);
    }

block append scripts
  script(src='/socket.io/socket.io.js')
  script.
    const socket = io();
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const messageContainer = document.getElementById('messageContainer');
    const typingIndicator = document.getElementById('typingIndicator');
    const otherUserId = '#{otherUser._id}';
    const currentUserId = '#{user._id}';

    // Rola para última mensagem
    messageContainer.scrollTop = messageContainer.scrollHeight;

    // Envia mensagem
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const content = messageInput.value.trim();
      if (!content) return;

      // Envia via socket e aguarda confirmação
      socket.emit('private-message', {
        recipient: otherUserId,
        content: content
      });

      // Limpa input
      messageInput.value = '';
    });

    // Recebe mensagem
    socket.on('private-message', (data) => {
      // Verifica se a mensagem é desta conversa
      if ((data.sender === currentUserId && data.recipient === otherUserId) ||
          (data.sender === otherUserId && data.recipient === currentUserId)) {
        
        const isFromMe = data.sender === currentUserId;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isFromMe ? 'message-sent' : 'message-received'}`;
        
        messageDiv.innerHTML = `
          <div class="message-content">
            <p class="mb-0">${data.content}</p>
            <small class="text-muted">${new Date(data.createdAt).toLocaleTimeString()}</small>
          </div>
        `;

        messageContainer.appendChild(messageDiv);
        messageContainer.scrollTop = messageContainer.scrollHeight;
      }
    });

    // Notificações de digitação
    let typingTimeout;
    messageInput.addEventListener('input', () => {
      socket.emit('typing', { recipient: otherUserId });
      
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stop-typing', { recipient: otherUserId });
      }, 1000);
    });

    // Recebe notificação de digitação
    socket.on('user-typing', (data) => {
      if (data.sender === otherUserId) {
        typingIndicator.classList.remove('d-none');
      }
    });

    socket.on('user-stop-typing', (data) => {
      if (data.sender === otherUserId) {
        typingIndicator.classList.add('d-none');
      }
    });
  </script>